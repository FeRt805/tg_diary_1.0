import datetime
from config import TOKEN
from config import log, sasha1, admin
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions, InputFile
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from next_day import next_day
# pip3 install -r .\requirments.txt
from filling_db import generate, load
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from tg_table import marks_table, hometask_table, deals_list
from get_from_db import get_user_with_tg_id, set_tg_id, get_password, remove_tg_id, get_timetable, reduct_notes, \
    get_marks, get_subjects, get_hometask, set_password, set_info, get_info, get_note, set_notes, remove_note, get_tt
from complex_functions import prediction, graph, variants

from collections import OrderedDict

# TODO: hometask –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–∞–ª–æ—á–∫–∏, –≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–æ–±–∞–≤–∏—Ç—å nextday, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –Ω–∞ marks

'''
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
–û–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram
'''

# –í—Å–µ –∫–æ–º–º–∞–Ω–¥—ã –±–æ—Ç–∞, –æ—Ç—Å—ã–ª–∞–µ—Ç—å—Å—è @BotFather
commands_f_b = \
    '''
start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞
login - –í—Ö–æ–¥ –≤ —Å–≤–æ—é —É—á–µ—Ç–∫—É
exit - –í—ã—Ö–æ–¥ –∏–∑ —Å–≤–æ–µ–π —É—á–µ—Ç–∫–∏
password - –í–∞—à –ø–∞—Ä–æ–ª—å
info - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
list - –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª
timetable - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
marks - –¢–∞–±–ª–∏—Ü–∞ –æ—Ü–µ–Ω–æ–∫
hometask - –¢–∞–±–ª–∏—Ü–∞ —Å –î/–ó 
next - –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
predict - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥—É—â–µ–π –æ—Ü–µ–Ω–∫–∏
get_mark- –ü–æ–∏—Å–∫ –≤–∞—Ä–∏–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–µ–ª–∞–µ–º–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
graph - –î–∏–Ω–∞–º–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
fill_db - –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∞–¥–º–∏–Ω)
get_password - –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
next_day - –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–Ω–µ–π (–∞–¥–º–∏–Ω) 
'''

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π(–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π) —Ç–µ–∫—Å—Ç
description_f_b = \
    '''
–ü—Ä–∏–≤–µ—Ç! üëã

–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

üë®‚Äçüíª–ê–≤—Ç–æ—Ä: @FeRt805 
'''

# –¢–µ–∫—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã–π –ø–æ –≤—ã–∑–æ–≤—É –∫–æ–º–∞–Ω–¥—ã /help
help_text = \
    '''
*–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É*
_–í —Å–∫–æ–±–∫–∞—Ö "()" —É–∫–∞–∑–∞–Ω—ã –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥_ 

/start - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–¥ 

/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞

/login - –í—Ö–æ–¥ –≤ —Å–≤–æ—é —É—á–µ—Ç–∫—É

/exit - –í—ã—Ö–æ–¥ –∏–∑ —Å–≤–æ–µ–π —É—á–µ—Ç–∫–∏

/password_(/pw)_ - –í–∞—à –ø–∞—Ä–æ–ª—å –∫ —É—á–µ—Ç–∫–µ
_–ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å_

/info_(/about_\\__me)_ - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ
_–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ_

/list_(/todo; /deals)_ - –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª
_–ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—å—Å—è –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞_
_–ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ ALL –∏–ª–∏ clear_
_–ü—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ ~~~_

/timetable - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤

/marks_(/grades)_ - –¢–∞–±–ª–∏—Ü–∞ –æ—Ü–µ–Ω–æ–∫

/hometask_(/ht; /hw; /homework)_ - –¢–∞–±–ª–∏—Ü–∞ —Å –î/–ó 

/next - –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –∏—Å—Ö–æ–¥—è –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

/predict(/pr) - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥—É—â–µ–π –æ—Ü–µ–Ω–∫–∏

/get\\_mark_(/gm)_ - –í—ã–≤–æ–¥–∏—Ç —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∂–µ–ª–∞–µ–º–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
_–ù–∞–ø—Ä–∏–º–µ—Ä:_
_/get_\\__mark 10 7_
_–í—ã–≤–æ–¥–∏—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∂–µ —É–∫–∞–∑–∞–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 7 –¥–ª–∏–Ω–Ω–æ–π 10_ 

/graph_(/gr)_ - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏


*–§—É–Ω–∫—Ü–∏–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*
 
/fill\\_db_(/fill_\\__database)_ - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –ë–î (–ù–æ–≤—ã–µ —É—á–µ–Ω–∏–∫–∏, –æ—Ü–µ–Ω–∫–∏ –∏ —Ç.–¥.)

/get\\_password - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
_/get_\\__password ~~~random~~~ –≤—ã–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å_

/next\\_day - –≠–º—É–ª–∏—Ä—É–µ—Ç –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–Ω–µ–π (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –î–ó –∏ –æ—Ü–µ–Ω–∫–∏)
'''

days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

subjects = []
subj = []
admins_nicks = [sasha1[0], admin[0]]

way = 5
leng = 3
subject_f_a = "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class add_notes(StatesGroup):
    waiting_for_end = State()


class del_notes(StatesGroup):
    id_to_del = State()


class info_text(StatesGroup):
    about_me_text = State()


class ch_password(StatesGroup):
    new_password = State()


class dest_mark_wait(StatesGroup):
    dest_mark = State()

class wait_for_ht(StatesGroup):
    ht_subject = State()

class wait_for_pr(StatesGroup):
    args = State()

async def is_user_logined(tg_id, message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    :param tg_id:
    :param message:
    :return: True/False
    """
    if get_user_with_tg_id(tg_id) is None:
        await message.reply("–ù—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        return False
    else:
        return True


########################################################################

@dp.message_handler(commands=['start'])
async def start_func(message: types.Message):
    sticker_welcome = "CAACAgIAAxkBAAIBUmHZlnyxlmgi2sOsLrPWPwNpKS3-AAKKAgACVp29Cj5SbosTxUBnIwQ"  # sticker tg id
    await bot.send_sticker(message.chat.id, sticker_welcome)

    tg_id = message.from_user.id
    nickname = get_user_with_tg_id(tg_id)

    if nickname is None:
        s = "–î–ª—è –Ω–∞—á–∞–ª–∞, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É " \
            "/login _username_ _password_"
    else:
        s = nickname + ", –≤—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∏ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏"

    await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! "
                                            "–≠—Ç–æ –±–æ—Ç-–¥–Ω–µ–≤–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤ –æ–±—É—á–µ–Ω–∏–∏\n"
                           + s +
                           "\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /help",
                           parse_mode=ParseMode.MARKDOWN)


########################################################################

@dp.message_handler(commands=['help'])
async def help_func(message: types.Message):
    await bot.send_message(message.chat.id, help_text, parse_mode=ParseMode.MARKDOWN)


########################################################################

@dp.message_handler(commands=['next'])
async def next_func(message: types.Message):
    """
    –û—Ç—Å—ã–ª–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
    :param message:
    :return:
    """

    tg_id = message.from_user.id

    if await is_user_logined(tg_id, message):
        m_date = message.date

        tt = get_tt(tg_id)
        weekday = days[m_date.weekday()]
        m_date_time = m_date.time()
        m = True
        if weekday in tt:
            for lesson in tt[weekday]:
                lesson_start_time_str = lesson[lesson.find("(") + 1:lesson.find("-") - 1]
                lesson = lesson[:lesson.find("(")]
                l_t = datetime.datetime.strptime(lesson_start_time_str, "%H:%M")
                lesson_start_time = l_t.time()
                if m_date_time < lesson_start_time:
                    q1 = datetime.datetime.combine(datetime.date.today(), m_date_time)
                    q2 = datetime.datetime.combine(datetime.date.today(), lesson_start_time)
                    df = q2 - q1
                    await message.reply(f"–ß–µ—Ä–µ–∑ {df} –Ω–∞—á–Ω–µ—Ç—å—Å—è —É—Ä–æ–∫ *{lesson}*–≤ {lesson_start_time_str}",
                                        parse_mode=ParseMode.MARKDOWN)
                    m = False
                    break
            if m:
                await message.reply("–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —É—Ä–æ–∫–æ–≤!", parse_mode=ParseMode.MARKDOWN)

        else:
            await message.reply("–°–µ–≥–æ–¥–Ω—è —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç!", parse_mode=ParseMode.MARKDOWN)


########################################################################

inline_btn_1 = InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data='button1435435')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)


@dp.message_handler(commands=['password'], state="*")
async def password_func(message: types.Message):
    """
    –ü–∞—Ä–æ–ª—å
    :param message:
    :return:
    """
    tg_id = message.from_user.id
    if await is_user_logined(tg_id, message):
        t = f"–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:\n{get_password(get_user_with_tg_id(tg_id))}"
        await message.reply(t, reply_markup=inline_kb1)


@dp.callback_query_handler(lambda c: c.data == 'button1435435', state="*")
async def password_start(callback_query: types.CallbackQuery):
    """
    –ú–µ–Ω—è–µ—Ç—å—Å—è –ø–∞—Ä–æ–ª—å
    :param callback_query:
    :return:
    """
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:')
    await ch_password.new_password.set()


@dp.message_handler(state=ch_password.new_password)
async def password_chosen(message: types.Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å
    :param message:
    :param state:
    :return:
    """
    await state.update_data(new_password=message.text)
    tg_id = message.from_user.id
    user_data = await state.get_data()
    await message.answer(set_password(tg_id, user_data["new_password"]))
    await state.finish()


########################################################################

inline_btn_2 = InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ', callback_data='button232314334')
inline_kb2 = InlineKeyboardMarkup().add(inline_btn_2)


@dp.message_handler(commands=["about_me", "info"], state="*")
async def about_me_func(message: types.Message):
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    :param message:
    :return:
    """
    tg_id = message.from_user.id
    if await is_user_logined(tg_id, message):
        t = f"–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n{get_info(get_user_with_tg_id(tg_id))}"
        await message.reply(t, reply_markup=inline_kb2)


@dp.callback_query_handler(lambda c: c.data == 'button232314334', state="*")
async def about_me_start(callback_query: types.CallbackQuery):
    """
    –ú–µ–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    :param callback_query:
    :return:
    """
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å')
    await info_text.about_me_text.set()


@dp.message_handler(state=info_text.about_me_text)
async def about_me_chosen(message: types.Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –º–µ–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    :param message:
    :param state:
    :return:
    """
    await state.update_data(about_me_text=message.text)
    tg_id = message.from_user.id
    user_data = await state.get_data()
    await message.answer(set_info(tg_id, user_data["about_me_text"]))
    await state.finish()


########################################################################

inline_btn_3_1 = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='button3433434341')
inline_btn_3_2 = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='button3433434342')
inline_kb3 = InlineKeyboardMarkup().add(inline_btn_3_1).add(inline_btn_3_2)


@dp.message_handler(commands=['todo', "deals", "list"], state="*")
async def todo_func(message: types.Message):
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª
    :param message:
    :return:
    """
    # –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ /deals <—Å—Ç—Ä–æ–∫–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ> <–∏–Ω–¥–µ–∫—Å?>

    tg_id = message.from_user.id
    if await is_user_logined(tg_id, message):
        q = deals_list(get_note(get_user_with_tg_id(tg_id)))
        t = f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–µ–ª–∞:\n{q}"
        if q == "\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–¥–∞—á\n_–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \n\"–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ\"_":
            await message.reply(t, reply_markup=inline_kb3, parse_mode=ParseMode.MARKDOWN)
        else:
            await message.reply(t, reply_markup=inline_kb3)


@dp.callback_query_handler(lambda c: c.data == 'button3433434341', state="*")
async def todo_add_start(callback_query: types.CallbackQuery):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    :param callback_query:
    :return:
    """
    await bot.answer_callback_query(callback_query.id)
    t = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n' + \
        "_–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–æ–∫\n(—Å –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–¥–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ)\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ~~~_"
    await bot.send_message(callback_query.from_user.id, t,
                           parse_mode=ParseMode.MARKDOWN)
    await add_notes.waiting_for_end.set()


@dp.callback_query_handler(lambda c: c.data == 'button3433434342', state="*")
async def todo_remove_start(callback_query: types.CallbackQuery):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∑–∞–¥–∞—á–∏
    :param callback_query:
    :return:
    """
    await bot.answer_callback_query(callback_query.id)
    t = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:\n\n' + \
        "_–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–æ–∫\n(—É–¥–∞–ª—è–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É)\n" \
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ~~~_"
    await bot.send_message(callback_query.from_user.id, t,
                           parse_mode=ParseMode.MARKDOWN)

    await del_notes.id_to_del.set()


@dp.message_handler(state=del_notes.id_to_del)
async def todo_remove_chosen(message: types.Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ(–∏–Ω–¥–µ–∫—Å) –∏ —É–¥–∞–ª–µ—Ç –∑–∞–¥–∞—á—É
    –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ ~~~
    :param message:
    :param state:
    :return:
    """
    await state.update_data(id_to_del=message.text)
    tg_id = message.from_user.id
    user_data = await state.get_data()
    if message.text != "~~~":
        if "/" in message.text:
            await message.answer("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫"
                                 "\n–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –±–æ—Ç—É ~~~ –¥–ª—è –≤—ã—Ö–æ–¥–∞")

        await message.answer(remove_note(tg_id, user_data["id_to_del"]) + "_\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –ø—Ä–∏—à–ª–∏—Ç–µ ~~~_",
                             parse_mode=ParseMode.MARKDOWN)
    else:
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫\n–ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
        await state.finish()


@dp.message_handler(state=add_notes.waiting_for_end)
async def todo_add_chosen(message: types.Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–∏—Å–∏ ~~~
    :param message:
    :param state:
    :return:
    """
    await state.update_data(waiting_for_end=message.text)
    tg_id = message.from_user.id
    user_data = await state.get_data()
    if message.text != "~~~":
        if "/" in message.text:
            await message.answer("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–º–µ—Ç–æ–∫\n–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –±–æ—Ç—É ~~~ –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        await message.answer(set_notes(tg_id, user_data["waiting_for_end"]) + "_\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –ø—Ä–∏—à–ª–∏—Ç–µ ~~~_",
                             parse_mode=ParseMode.MARKDOWN)
    else:
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–º–µ—Ç–æ–∫\n–ú–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
        await state.finish()


########################################################################

@dp.message_handler(commands=['exit'])
async def exit_func(message: types.Message):
    """
    –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ /login
    –î–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    :param message:
    :return:
    """
    tg_id = message.from_user.id
    name = get_user_with_tg_id(tg_id)
    if name is None:
        photo = InputFile(r"./one_does_not_simply.jpg")
        await bot.send_photo(chat_id=message.chat.id, photo=photo)
    else:
        await bot.send_message(message.chat.id, remove_tg_id(name))


########################################################################
@dp.message_handler(commands=['next_day'])
async def nex_day_func(message: types.Message):
    # –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–Ω–µ–π
    if len(message.text.split()) == 2:
        days_passed = message.text.split()[1]
        if days_passed.isnumeric():
            tg_id = message.from_user.id
            if get_user_with_tg_id(tg_id) in admins_nicks:
                await bot.send_message(message.chat.id, next_day(int(days_passed)))
            else:
                await message.reply("*–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!*",
                                    parse_mode=ParseMode.MARKDOWN)
        else:
            t = text(bold("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞"),
                     "\n–í–≤–µ–¥–∏—Ç–µ /next\\_day _–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏_")

            await message.reply(t, parse_mode=ParseMode.MARKDOWN)

    else:
        t = text(bold("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞"),
                 "\n–í–≤–µ–¥–∏—Ç–µ /next\\_day _–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏_")

        await message.reply(t, parse_mode=ParseMode.MARKDOWN)


########################################################################
@dp.message_handler(commands=['get_password'])
async def get_pass_func(message: types.Message):
    # –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(message.text.split()) == 2:
        nickname = message.text.split()[1]
        tg_id = message.from_user.id
        if get_user_with_tg_id(tg_id) in admins_nicks:
            await bot.send_message(message.chat.id, get_password(nickname))
        else:
            await message.reply("*–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!*",
                                parse_mode=ParseMode.MARKDOWN)
    else:
        t = text(bold("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞"),
                 "\n–í–≤–µ–¥–∏—Ç–µ /get\\_password _–Ω–∏–∫–Ω–µ–π–º_\n~~~random~~~ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è")

        await message.reply(t, parse_mode=ParseMode.MARKDOWN)


########################################################################
@dp.message_handler(commands=['fill_db', 'fill_database'])
async def get_pass_func(message: types.Message):
    # –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    tg_id = message.from_user.id
    if get_user_with_tg_id(tg_id) in admins_nicks:
        await bot.send_message(message.chat.id, "–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        generate()
        await bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        await bot.send_message(message.chat.id, "–ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î")
        load()
        await bot.send_message(message.chat.id, "–ë–î –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        await message.reply("*–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!*",
                            parse_mode=ParseMode.MARKDOWN)


########################################################################
@dp.message_handler(commands=['predict', "pr"])
async def predict_func(message: types.Message):
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥—É—â–µ–π –æ—Ü–µ–Ω–∫–∏
    :param message:
    :return:
    """
    global subjects, subj
    tg_id = message.from_user.id
    if await is_user_logined(tg_id, message):
        subjects = get_subjects(tg_id)
        s = []
        # –ö–û–°–¢–´–õ–¨ –∑–∞–∫–ª—é—á–∞—é—â–∏–π—Å—è –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç–æ–º –∏—â–µ—Ç—Å—è —Ö–µ–Ω–¥–ª–∏—Ä–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
        for i in subjects:
            # s.append(str(i) + "‚ÄÇ")  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
            s.append(str(i))  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
        # ‚ÄÉ  ‚ÄÇ üîé üîç ‚òÉ‚òÉ‚òÉ‚òÉ
        subjects = s

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        l = []

        for i in subjects:
            l.append(i)
            le = len(l)
            if i == subjects[-1]:
                kb.row(*l)
                le = -1
            if le == 3:
                kb.row(*l)
                l = []

        marks = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç..."
        await wait_for_pr.args.set()
        await message.answer(marks, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)


########################################################################
@dp.message_handler(state=wait_for_pr.args)
async def predict_handle(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    """
    await state.update_data(args=message.text)
    tg_id = message.from_user.id
    user_data = await state.get_data()
    if await is_user_logined(tg_id, message):
        marks = get_marks(tg_id, message.text)

        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        for mark1 in range(len(marks) - 1):
            for mark2 in range(len(marks) - mark1 - 1):
                if marks[mark2][1] > marks[mark2 + 1][1]:
                    marks[mark2], marks[mark2 + 1] = marks[mark2 + 1], marks[mark2]

        pretty_marks = "```" + marks_table(marks, message.text) + "```"
        raw_marks = []
        for i in marks:
            raw_marks.append(i[0])

        if len(raw_marks) == 0:
            predict = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É"
        else:
            predict = "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–ª–µ–¥—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: " + str(prediction(*raw_marks))
        await bot.send_message(message.chat.id, pretty_marks,
                               reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN)

        await bot.send_message(message.chat.id, predict,
                               reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN)
        await state.finish()

########################################################################


@dp.message_handler(commands=['get_mark', "gm"])
async def variants_func(message: types.Message):
    """
    –ü–æ–∏—Å–∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
    :param message:
    :return:
    """
    q = True  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(message.text.split()) == 3:

        d = message.text.split()[1]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –ø—É—Ç–∏
        lng = message.text.split()[2]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞—Ç–æ–≤

        if d.isnumeric() and lng.isnumeric():
            q = False
            t = text(bold("–ó–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ!"), "C–º. /help")
            await message.reply(t, parse_mode=ParseMode.MARKDOWN)

    else:

        t = text("–ù–µ —É–∫–∞–∑–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è \"–∫–æ–ª-–≤–æ –æ—Ü–µ–Ω–æ–∫\" –∏ \"–∫–æ–ª-–≤–æ –≤–∞—Ä–∏–∞—Ç–æ–≤\""
                 "\n–í–∑—è—Ç—ã –∑–Ω–∞—á–µ–Ω–∏—è 5 –∏ 3\n–°–º. /help ")
        d = "5"  # –∫–æ–ª-–≤–æ –æ—Ü–µ–Ω–æ–∫
        lng = "3"  # –∫–æ–ª-–≤–æ –≤–∞—Ä–∏–∞—Ç–æ–≤
        await message.reply(t, parse_mode=ParseMode.MARKDOWN)

    # –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
    if q:
        global subjects, subj
        tg_id = message.from_user.id
        if await is_user_logined(tg_id, message):
            subjects = get_subjects(tg_id)

            keyboard = InlineKeyboardMarkup(row_width=3)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            l = []
            for i in subjects:
                l.append(InlineKeyboardButton(i, callback_data="var_but" + "?" + i + "?" + d + "?" + lng))

            keyboard.add(*l)

            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç...", reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)


########################################################################
@dp.callback_query_handler(text_contains="var_but")
async def variant_chosen(call: types.CallbackQuery):
    """
    –í—ã–±–æ—Ä –∂–µ–ª–∞–µ–º–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –¥–ª —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –≤–∞—Ä–∏–∞—Ç–æ–≤
    :param call:
    :return:
    """
    global way, leng, subject_f_a

    q = call.data.split("?")
    subject_f_a = q[1]
    way = q[2]
    leng = q[3]

    await call.answer(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ \"{subject_f_a}\"", show_alert=True)

    await call.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å...\n_–ß–∏—Å–ª–æ –æ—Ç 3 –¥–æ 5_",
                              parse_mode=ParseMode.MARKDOWN)

    await dest_mark_wait.dest_mark.set()


@dp.message_handler(state=dest_mark_wait.dest_mark)
async def variant_mark_chosen(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –≤–∞—Ä–∏–∞—Ç–æ–≤
    :param message:
    :param state:
    :return:
    """
    await state.update_data(id_to_del=message.text)
    user_data = await state.get_data()
    tg_id = message.from_user.id
    if message.text in ["3", "4", "5"]:
        global way, leng, subject_f_a
        marks_f = get_marks(tg_id, subject_f_a)
        marks = [i[0] for i in marks_f]
        marks_out = [str(i[0]) + " " for i in marks_f]
        dest_mark = user_data["id_to_del"]
        await message.answer(text=f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ \"{subject_f_a}\":\n"
                                  + "".join(marks_out), parse_mode=ParseMode.MARKDOWN)
        if len(marks) != 0:
            k = 1
            for w in variants(int(dest_mark), int(way), int(leng), *marks):
                marks_way = [i + " " for i in w[0]]
                mark_average = w[1]
                t = f"–°–ø–æ—Å–æ–± ‚Ññ{str(k)}\n–í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:\n" + "".join(marks_way) + \
                    f"\n–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Å—Ç–∞–Ω–µ—Ç {str(mark_average)}"
                await message.answer(text=t, parse_mode=ParseMode.MARKDOWN)
                k += 1

        else:
            await message.answer(text="*–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—Ü–µ–Ω–æ–∫!*", parse_mode=ParseMode.MARKDOWN)

        await state.finish()

    else:
        await message.answer(text="*–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!*\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å...\n"
                                  "_–ß–∏—Å–ª–æ –æ—Ç 3 –¥–æ 5_", parse_mode=ParseMode.MARKDOWN)


########################################################################


@dp.message_handler(commands=['graph', "gr"])
async def graph_func(message: types.Message):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–∞
    :param message:
    :return:
    """
    global subjects, subj
    tg_id = message.from_user.id
    if await is_user_logined(tg_id, message):
        subjects = get_subjects(tg_id)
        s = []
        # –ö–û–°–¢–´–õ–¨ –∑–∞–∫–ª—é—á–∞—é—â–∏–π—Å—è –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç–æ–º –∏—â–µ—Ç—Å—è —Ö–µ–Ω–¥–ª–∏—Ä–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
        for i in subjects:
            s.append(str(i) + "üìä")  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
        # ‚ÄÉ  ‚ÄÇ üîé üîç ‚òÉ‚òÉ‚òÉ‚òÉ
        subjects = s

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        l = []

        for i in subjects:
            l.append(i)
            le = len(l)
            if i == subjects[-1]:
                kb.row(*l)
                le = -1
            if le == 3:
                kb.row(*l)
                l = []

        marks = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç..."
        await message.answer(marks, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)


########################################################################
@dp.message_handler(Text(contains="üìä"))
async def predict_handle(message: types.Message):
    tg_id = message.from_user.id
    if await is_user_logined(tg_id, message):
        marks = get_marks(tg_id, message.text[:-1])

        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        for mark1 in range(len(marks) - 1):
            for mark2 in range(len(marks) - mark1 - 1):
                if marks[mark2][1] > marks[mark2 + 1][1]:
                    marks[mark2], marks[mark2 + 1] = marks[mark2 + 1], marks[mark2]

        pretty_marks = "```" + marks_table(marks, message.text[:-1]) + "```"

        # –û—Ü–µ–Ω–∫–∏
        await bot.send_message(message.chat.id, pretty_marks,
                               reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN)

        raw_marks = OrderedDict()
        k = 0
        for i in marks:
            x = i[1].strftime('%d.%m') + k * "‚ÄÇ"  # –î–µ–ª–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–∏
            y = i[0]
            raw_marks.update({x: y})
            k += 1

        if len(raw_marks) == 0:
            t = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É"
            await bot.send_message(message.chat.id, t,
                                   reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN)
        else:
            f = graph(**raw_marks)
            photo = InputFile(f)
            await bot.send_photo(chat_id=message.chat.id, photo=photo)

            t = f"–í—ã–≤–µ–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{message.text[:-1]}\" –∑–∞ " \
                f"{list(raw_marks.keys())[0]} - {list(raw_marks.keys())[-1]}"
            await bot.send_message(message.chat.id, t,
                                   reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN)


########################################################################


@dp.message_handler(commands=['timetable'])
async def timetable_func(message: types.Message):
    """
    –í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message:
    :return:
    """
    tg_id = message.from_user.id

    if await is_user_logined(tg_id, message):
        table = "```" + get_timetable(tg_id) + "```"
        await bot.send_message(message.chat.id, table, parse_mode=ParseMode.MARKDOWN)


########################################################################

@dp.message_handler(commands=['login'])
async def login_func(message: types.Message):
    # –ó–∞–ø–∏—Å—å tg username –∏ tg id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏–Ω–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(message.text.split()) == 3:
        name = message.text.split()[1]
        password = message.text.split()[2]
        tg_id = message.from_user.id

        if password == get_password(name):
            await bot.send_message(message.chat.id, set_tg_id(name, tg_id))
        else:
            await message.reply("*–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!*", parse_mode=ParseMode.MARKDOWN)

    else:

        t = text(bold("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞"),
                 "\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ø–æ—Å–ª–µ –∫–æ–º–º–∞–Ω–¥—ã login \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: /login vasya\_pupkin "
                 "password")

        await message.reply(t, parse_mode=ParseMode.MARKDOWN)


########################################################################

@dp.message_handler(commands=['marks', "grades"])
async def marks_func(message: types.Message):
    """
    –í—ã–≤–æ–¥ –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message:
    :return:
    """
    global subjects, subj
    tg_id = message.from_user.id
    if await is_user_logined(tg_id, message):
        subjects = get_subjects(tg_id)
        s = []
        # –ö–û–°–¢–´–õ–¨ –∑–∞–∫–ª—é—á–∞—é—â–∏–π—Å—è –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç–æ–º –∏—â–µ—Ç—Å—è —Ö–µ–Ω–¥–ª–∏—Ä–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
        for i in subjects:
            s.append(str(i) + "‚Å£")  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
        # ‚ÄÉ  ‚ÄÇ üîé üîç ‚òÉ‚òÉ‚òÉ‚òÉ
        subjects = s

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        l = []

        for i in subjects:
            l.append(i)
            le = len(l)
            if i == subjects[-1]:
                kb.row(*l)
                le = -1
            if le == 3:
                kb.row(*l)
                l = []

        kb.row(KeyboardButton("–í—Å–µ –æ—Ü–µ–Ω–∫–∏‚Å£"))

        marks = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç..."
        await message.answer(marks, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)


########################################################################


@dp.message_handler(commands=['hometask', 'hometasks', "ht", "homework", "hw"])
async def hometasks_func(message: types.Message):
    """
    –í—ã–≤–æ–¥ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è(–¥–∑) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message:
    :return:
    """
    global subjects, subj
    tg_id = message.from_user.id
    if await is_user_logined(tg_id, message):
        subjects = get_subjects(tg_id)
        s = []
        # –ö–û–°–¢–´–õ–¨ –∑–∞–∫–ª—é—á–∞—é—â–∏–π—Å—è –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç–æ–º –∏—â–µ—Ç—Å—è —Ö–µ–Ω–¥–ª–∏—Ä–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
        # –Ø –ü–û–ß–ò–ù–ò–õ –ü–û–¢–û–ú–£ –ß–¢–û –°–†–ê–ù–´–ô EDGE –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª
        for i in subjects:
            s.append(str(i))  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
            # s.append(str(i) + "‚ÄÉ")  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
        # ‚ÄÉ  ‚ÄÇ üîé üîç ‚òÉ‚òÉ‚òÉ‚òÉ
        subjects = s

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        l = []

        for i in subjects:
            l.append(i)
            le = len(l)
            if i == subjects[-1]:
                kb.row(*l)
                le = -1
            if le == 3:
                kb.row(*l)
                l = []

        # kb.add(*subjects)
        # kb.row(KeyboardButton("–í—Å–µ –∑–∞–¥–∞–Ω–∏—è‚ÄÉ"))
        kb.row(KeyboardButton("–í—Å–µ –∑–∞–¥–∞–Ω–∏—è"))
        await wait_for_ht.ht_subject.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç...", reply_markup=kb, parse_mode=ParseMode.MARKDOWN)


########################################################################

@dp.message_handler(Text(contains="‚Å£"))
async def marks_handle(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –æ—Ü–µ–Ω–æ–∫
    :param message:
    :return:
    """
    tg_id = message.from_user.id
    if await is_user_logined(tg_id, message):
        marks = get_marks(tg_id, message.text[:-1])

        if len(marks) == 0:
            if message.text[:-1] == "–í—Å–µ –æ—Ü–µ–Ω–∫–∏":
                pretty_marks = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º\n_–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ!_"
            else:
                pretty_marks = f"–£ –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{message.text[:-1]}\""
        else:
            pretty_marks = "```" + marks_table(marks, message.text[:-1]) + "```"

        await bot.send_message(message.chat.id, pretty_marks,
                               reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(state=wait_for_ht.ht_subject)
async def hometasks_handle(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –¥–∑
    """
    await state.update_data(ht_subject=message.text)
    tg_id = message.from_user.id
    user_data = await state.get_data()
    if await is_user_logined(tg_id, message):
        hometask = get_hometask(tg_id, message.text)
        if len(hometask) == 0:
            if message.text == "–í—Å–µ –∑–∞–¥–∞–Ω–∏—è":
                pretty_hometask = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π\n_–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ!_"
            else:
                pretty_hometask = f"–£ –≤–∞—Å –Ω–µ—Ç –î/–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{message.text}\""
        else:
            pretty_hometask = "```" + hometask_table(hometask, message.text) + "```"

        # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤
        if len(pretty_hometask) > 4000:
            for lesson in get_subjects(tg_id):
                hometask = get_hometask(tg_id, lesson)
                if len(hometask) == 0:
                    pretty_hometask = f"–£ –≤–∞—Å –Ω–µ—Ç –î/–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{lesson}\""
                else:
                    pretty_hometask = "```" + hometask_table(hometask, lesson) + "```"

                await bot.send_message(message.chat.id, pretty_hometask,
                                       reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN)
        else:
            await bot.send_message(message.chat.id, pretty_hometask,
                                   reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN)
    await state.finish()

# –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
if __name__ == '__main__':
    # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    if log:
        print("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞")
        print("#####################################")

    executor.start_polling(dp)  # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ TG –±–æ—Ç–∞

    # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    if log:
        print("–ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞")
        print("####################################")
